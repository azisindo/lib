unit Libstring;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils,Types,Variants,StrUtils,DateUtils,LCLType,ZConnection,
   DB,fpjson, jsonparser,LazFileUtils;


Procedure GetVarExternal;

function setting_koneksi(vConn: TZConnection) : Boolean  ;
function GetLibConnection: string;

function YesNo(const Msg: string): Boolean;

function Lpad(vString1 : string; vJumlah:integer; vString2 :string=' '):string;
function Rpad(vString1 : string; vJumlah:integer; vString2 :string=' '):string;
function Cpad(vString1 : string; vJumlah:integer; vString2 :string=' '):string;
Function str_rp(nilai : int64) : string;
Function str_koma(nilai : double) : string;
Function str_koma_1(nilai : double) : string;
Function nilai_rp(nilai : string) : Int64;
Function nilai_koma(nilai : string) : double;
Function dalam_str (nilai : double; smatauang:string='RUPIAH') : string ;
Function posisi_str(teks, kt : string ; posisi : integer = 1 ) : integer ;

var
   //Setingan Koneksi
   g_logger       : String;
   g_HostName     : string;
   g_Port         : integer;
   g_DatabaseName : string;
   g_UserName     : string;
   g_Password     : string;

   //Setingan Database
   g_db1          : String;
   g_db2          : String;
   g_db3          : String;

   //Setingan Lib connection
   g_dir_lib_lx       : String;
   g_dir_lib_win      : String;

implementation




Procedure GetVarExternal;
var
  JsonData: TJSONData;
  jsonFile: TFileStream;
  {
    "host": "localhost",
    "port": 3306,
    "database": "hrms",
    "username": "root",
    "password": "password",
    "database1": "hrms",
    "database2": "hrms",
    "database3": "hrms",
    "dirLiblx": "/usr/lib/x86_64-linux-gnu/libmariadb.so.3",
    "dirLibwin": "C:\Program Files\MariaDB 11.1\lib\libmariadb.dll"
  }
begin
    jsonFile := TFileStream.Create('setvar.json', fmOpenRead);
    JsonData := GetJSON(jsonFile);

    try
      g_HostName      := JsonData.FindPath('host').AsString;
      g_Port          := JsonData.FindPath('port').AsInteger;
      g_DatabaseName  := JsonData.FindPath('database').AsString;
      g_UserName      := JsonData.FindPath('username').AsString;
      g_Password      := JsonData.FindPath('password').AsString;

      g_db1           := JsonData.FindPath('database1').AsString;
      g_db2           := JsonData.FindPath('database2').AsString;
      g_db3           := JsonData.FindPath('database3').AsString;

      g_dir_lib_lx    := JsonData.FindPath('dirLiblx').AsString;
      g_dir_lib_win   := JsonData.FindPath('dirLibwin').AsString;

    finally
      JsonData.Free;
      jsonFile.Free;
    end;

end;

function setting_koneksi(vConn: TZConnection) : Boolean;
begin

  GetVarExternal;

  vConn.HostName := g_HostName;
  vConn.Port     := g_Port;
  vConn.Database := g_DatabaseName;
  vConn.User     := g_UserName;
  vConn.Password := g_Password;
  vConn.LibraryLocation:=GetLibConnection;

  // connect
  Try
    vConn.Connected := true;
    g_logger:='Connection Succes';
     //vConn.ExecuteDirect();
     //vConn.ExecSQL('set @ApplicationCode = "' + qtaf.pubAppCode + qtaf.pubAppVersion + '" ', []) ;
     //vConn.ExecSQL('CALL srv.P_INIT_DATABASE('''+g_me_nik+''','''+g_uu_code_aktif+''') ', []) ;
    Result := True ;
  Except
    on E: Exception do
    begin
      g_logger:=E.Message;
      Result:=False;
    end;
  End ;
end;

function GetLibConnection: string;
begin
  {$IFDEF UNIX}
    //Result := '/usr/lib/x86_64-linux-gnu/libmariadb.so.3'; // Ubah sesuai dengan lokasi library MariaDB di Linux
    Result := g_dir_lib_lx; // Ubah sesuai dengan lokasi library MariaDB di Linux
  {$ENDIF}
  {$IFDEF WINDOWS}
    Result := g_dir_lib_win;
    //Result := 'C:\Program Files\MariaDB 11.1\lib\libmariadb.dll';// Ubah sesuai dengan lokasi library MariaDB di Windows
  {$ENDIF}
end;

function YesNo(const Msg: string): Boolean;
begin
   Result := MessageDlg(Msg, mtConfirmation, [mbOK, mbCancel], 0) = mrOK;
end;

function Lpad(vString1 : string; vJumlah:integer; vString2 :string=' '):string;
var
   vHasil : string;
   vLoop:integer;
begin
  vHasil:='';
  for vLoop :=1 to vJumlah do vHasil:=vHasil + vString2;
  vHasil :=LeftStr(vString1 + vHasil,vJumlah);
  Result :=vHasil;
end; 

function Rpad(vString1 : string; vJumlah:integer; vString2 :string=' '):string;
var
   vHasil : string;
   vLoop:integer;
begin
  vHasil:='';
  for vLoop :=1 to vJumlah do vHasil:=vHasil + vString2;
  vHasil :=RightStr(vHasil + vString1,vJumlah);
  Result :=vHasil;
end;

function Cpad(vString1 : string; vJumlah:integer; vString2 :string=' '):string;
var
   vHasil : string;
   vLoop:integer;
begin
  vHasil:='';
  for vLoop :=1 to trunc((vJumlah-length(vString1))/2) do vHasil:=vHasil + vString2;
  vHasil :=vHasil + vString1;
  
  for vLoop:=1 to vJumlah do vHasil:= vHasil + vString2;
  vHasil:=LeftStr(vHasil,vJumlah);

  Result:=vHasil;

end;

Function str_rp(nilai : int64) : string;
var
  v_hasil : string ;
Begin
  if nilai = null then
    v_hasil := '0'
  else
    v_hasil := formatfloat('###,###,###,###',nilai) ;

  if length(v_hasil) = 0 then v_hasil := '0' ;

  result := v_hasil ;
End ;

Function str_koma(nilai : double) : string;
var
  v_hasil : string ;
Begin
  if nilai = null then
    v_hasil := '0'
  else
    v_hasil := formatfloat('###,###,###,###.###',nilai) ;

  result := v_hasil ;
End ;

 //Menghilangkan angka di belakang koma
Function str_koma_1(nilai : double) : string;
var
  v_hasil : string ;
Begin
  if nilai = null then
    v_hasil := '0'
  else
    v_hasil := formatfloat('###,###,###,##0',nilai) ;

  result := v_hasil ;
End ;

Function nilai_rp(nilai : string) : Int64;
var
  v_hasil : int64 ;
  v_temp  : string ;
Begin
  nilai   := trim(nilai) ;
  if nilai = '' then nilai := '0' ;
  v_temp  := stringreplace(nilai,' ','',[rfReplaceAll]) ;
  v_hasil := StrToInt(stringreplace(v_temp,',','',[rfReplaceAll])) ;

  result := v_hasil ;
End ;

Function nilai_koma(nilai : string) : double;
var
  v_hasil : double ;
  v_temp  : string ;
Begin
  nilai  := trim(nilai) ;
  if nilai = '' then nilai := '0' ;
  v_temp  := stringreplace(nilai,' ','',[rfReplaceAll]) ;
  v_hasil := StrTofloat(stringreplace(v_temp,',','',[rfReplaceAll])) ;

  result := v_hasil ;
End;

Function dalam_str (nilai : double; smatauang:string='RUPIAH') : string ;
var
  sMinus,hasil, h1, h2, h3, nil_str, tiga_digit : string ;
  a1, a2, a3, ke, angka, p_str : integer ;


begin
  if nilai < 0 then sMinus := 'MINUS ' else sMinus := '';
  nilai   := abs(nilai);
  nilai   := trunc(nilai) ;
  nil_str := floattostr(nilai) ;
  p_str   := length( nil_str ) ;
  ke      := 1 ;
  hasil   := '' ;

  while p_str > 0 do
  begin
    if p_str > 3 then
      tiga_digit := copy( nil_str, p_str - 2, 3)
    else
      tiga_digit := copy( nil_str, 1, p_str) ;

    angka := strtoint(tiga_digit) ;
    if angka <> 0 then
    begin
      h1 := '' ;
      h2 := '' ;
      h3 := '' ;

      a3 := angka mod 10 ;
      angka := trunc(angka / 10) ;
      a2 := angka mod 10 ;
      a1 := trunc(angka / 10) ;

      if a1 > 0 then
      begin
        h1 := trim( copy('SE      DUA     TIGA    EMPAT   LIMA    ENAM    TUJUH   DELAPAN SEMBILAN', ((a1 - 1) * 8) + 1, 8) ) ;
        if a1 = 1 then h1 := h1 + 'RATUS ' else h1 := h1 + ' RATUS ' ;
      end ;

      if a3 > 0 then
      begin
        h3 := trim( copy('SATU    DUA     TIGA    EMPAT   LIMA    ENAM    TUJUH   DELAPAN SEMBILAN', ((a3 - 1) * 8) + 1, 8) ) + ' ' ;
        if (a1 = 0) and (a2 = 0) and (a3 = 1) and (ke = 2)  then h3 := 'SE' ;
      End ;

      if a2 > 0 then
      begin
        if (a2 = 1) and (a3 <> 0) then
        begin
          h3 := '' ;
          h2 := trim( copy('SE      DUA     TIGA    EMPAT   LIMA    ENAM    TUJUH   DELAPAN SEMBILAN', ((a3 - 1) * 8) + 1, 8) ) ;
          if a3 = 1 then h2 := h2 + 'BELAS ' else h2 := h2 + ' BELAS ' ;
        end
        else
        begin
          h2 := trim( copy('SE      DUA     TIGA    EMPAT   LIMA    ENAM    TUJUH   DELAPAN SEMBILAN', ((a2 - 1) * 8) + 1, 8) ) ;
          if a2 = 1 then h2 := h2 + 'PULUH ' else h2 := h2 + ' PULUH ' ;
        end ;
      end ;

      hasil := h1 + h2 + h3 + trim( copy('       RIBU   JUTA   MILYAR TRILYUNBILYUN ',((ke-1) * 7) + 1,7) ) + ' ' + hasil ;
    end ;

    p_str := p_str - 3 ;
    ke    := ke + 1 ;
  end ;

  result := trim(sMinus)+' '+trim(hasil)+' '+smatauang ;
end ;

function posisi_str(teks, kt: string; posisi: integer): integer;
var
  hasil, aposisi, plenteks : integer ;

begin
  hasil        := 0 ;
  teks         := trim(teks) ;
  plenteks     := length(kt) ;

  for aposisi := posisi to length(teks) do
  begin
    if ( copy(teks,aposisi,plenteks) = kt ) and (hasil = 0) then hasil := aposisi ;
  end ;
  result := hasil ;
end;
{
 SplitString_new( v_hdr1,';',v_hdr2,v_hdr1) ;

 var
  v_lebar, v_kolom : integer ;
  v_hdr2  : string;
  v_hdr1  : string ;
begin
  v_hdr1               := FJudulLov;
  v_lebar              := 0 ;
  v_kolom              := 0 ;

  SplitString_new( v_hdr1,';',v_hdr2,v_hdr1) ;

  v_hdr2 = out variable
}


procedure SplitString_new(const InputStr, Delimiter: string;
  var SubStr1, SubStr2: string);
var
  DelimIdx: Integer;
begin
  DelimIdx := Pos(Delimiter, InputStr);

  if DelimIdx > 0 then
  begin
    SubStr1 := Copy(InputStr, 1, DelimIdx - 1);
    SubStr2 := Copy(InputStr, DelimIdx + Length(Delimiter), Length(InputStr));
  end
  else
  begin
    SubStr1 := InputStr;
    SubStr2 := '';
  end;

end;


end.

